도커에서는 docker run --name webserver -p 80:80 httpd 이렇게했음 도커 커멘드

httpd라는 컨테이너를 pod 생성 / 실행 

1.CLI : kubectl run webserver --image=httpd --port 80
2.yml,yaml : kubectl apply -f pod-httpd.yaml //현업에서는 CLI보다 yaml을 많이 쓴다 보기가 쉽고 직관적이고 관리용이 해서.
kubectl create -f pod-httpd.yaml  //pod-httpd.yaml 파일이 있어야함

kubectl run webserver --image=httpd --port 80 --dry-run -o yaml
// --dry-run 은 그냥 만들지는말고 되는지만 알려줘 라는 느낌 -o yaml해서 이커맨드의 yaml파일형식을 알려준다
kubectl run webserver --image=httpd --port 80 --dry-run -o yaml >pod-httpd.yaml 하면 yaml파일 생성

.yaml파일
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: webserver
  name: webserver
spec:
  containers:
  - image: httpd
    name: webserver
    ports:
    - containerPort: 80
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
위에 yaml파일을 줄여쓰면
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
apiVersion: v1
kind: Pod
metadata:
  name: webserver-1
spec:
  containers:
  - image: httpd
    name: webserver
    ports:
    - containerPort: 80
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
kubectl get pod -o wide

NAME        READY   STATUS    RESTARTS   AGE     IP          NODE                NOMINATED NODE   READINESS GATES
webserver   1/1     Running   0          4m56s   10.36.0.1   doker.example.com   <none>           <none>

READY에서 1/1은 하나의 POD안에 컨테이너 한개가 들어가있다는 뜻
2/2이면 하나의 POD안에 2개의 컨테이너가 있다는 뜻

노드이름이 docker에서 실행된 ip:10.36.0.1을가진 pod

kubectl delete pod webserver(pod이름) 하면 pod 삭제

kubectl describe pod webserver(파드이름) //동작중인 파드 정보 자세히보기
kubectl edit pod webserver(파드이름) // 동작중인 파드 수정
kubectl delete pod webserver // 동작중인 파드 삭제
kubectl logs webserver // 파드내 컨테이너 로그보기
kubectl exec -it webserver -- /bin/bash // 동작중인 파드로 연결


pod랑 deployment는 다른것임 !!!!
pod 는        kubectl run webserver --image=httpd --port 80 /// kubectl apply -f pod-httpd.yaml /// kubectl create -f pod-httpd.yaml  이런 명령이 3개정도 있으면
deployment 는 kubectl create deployment webserver --image=httpd --replicas=3 이렇게 명령됨 
헷갈리지말기!
delpoyment안에 pod가 들어감 pod는 제일 작은단위
delpoyment는 24시간 계속 돌아가야됨 

nginx이미지 잘못넣었을때
kubectl edit deployments.apps webserver(pod이름)
가서 이미지 고치기 

kubectl get pods -o wide 해서 Name에 webserver-67asdasd-4cw2d 이런식으로 나오면 deployment로 만든것이고 
                                    deployment-controller-pod 를 가리키는 것입니다.
                         Name에 이름이 dasd같이 하나면 pod로 생성했다고 생각하면 된다           
 
 //lb만들기 쿠버네티스에서는 cluster라고하고 lb ip를 cluster ip(단일진입점) 라고 생각하면된다. 자동으로 node안에있는 pod들의 ip를 연결함
pod expose deployment webserver --port=80  // lb만든다고 생각하면된다
kubectl get service //하면 클러스터가 생성되고 ip하나가 생성되는데 이게 load-balance 라고 생각하면 된다 pod를 늘려줘도 자동으로 pod의 엔드포인트가 연결된다.

//하나의 pod에 두개이상의 컨테이너 넣기
기존에 만든 yaml 파일에 컨테이너 2개를 코드로넣고
kubectl apply -f pod-multiple-container.yaml //-f 옵션은 파일 옵션 해서 yaml파일 생성해주고
kubectl get pods //해서 생성된것 확인
kubectl describe pod multple-pod // 해서 컨테이너 2개가 들어간것 확인 //그리고 같은 파드니까 같은 IP를 사용하고 같은 호스트네임 사용
웬만하면 web,was를 같은파드에 넣어쓰면 좋고 db는 따로 하나의 파드에서 사용하는게 좋음


//pod의 label
kubectl lable pod appjs-pod app=web rel=stable //이런식으로 appjs-pod에 레이블(종류,버젼,프론트엔드,백엔드 등등) 넣는다.
kubectl get pod --show-labels //명령어로 label 확인
kubectl get pod -L app,rel //로도 확인가능
kubectl get pod --selecort app=web //레이블이 app=web 인것만 선택해서 확인
kubectl lable pod appjs-pod app- //하면 app=web 레이블이 삭제됨

label은 yaml파일 에서 수정하는것이 더 좋음
ㅡㅡㅡㅡㅡㅡㅡapp-pod.yaml파일ㅡㅡㅡㅡㅡㅡㅡ
apiVersion: v1
kind: Pod
metadata:
  name: appjs-label
  labels:                 //lable 위치는 metadata 아래에 구성됨 이렇게 적으면 됨
    app: web              //
    release: stable       //
  annotations:                                 // annotations 이런식으로 사용
    imageregistry:"https://hub.docker.com/"    //
spec:
  containers:
  - name: appjs-container
    image: smlinux/appjs
    ports:
    - containerPort: 8080
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

annotations: 버젼이나,특정 정보전달할 용도로 사용함
annotations:
  builder."daeyun@naver"
  buildData:"20211018"
  imageRegistry:https://hub.docker.com/    //이런식으로 사용함
  
kubectl delete pod --all // pod 다지우기

// node의 label
// node마다 예를들어 ssd를 쓰는 node도 있고 gpu,마그네틱 을 쓰는 node도 있고 해서 label을 붙여서 눈으로 볼 수 있게 관리
kubectl get nodes --show-labels  //node의 label 기
kubectl label nodes node1(노드이름) gpu=true(그냥gpu를 사용한다는뜻)
kubectl get nodes --show-labels //모든 레이블 다나옴 보기힘듬
kubectl get nodes -L gpu // gpu옵션중심으로 화면에 나오게함


yaml파일


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡtensorflow.yamlㅡㅡㅡㅡㅡㅡㅡㅡㅡ
apiVersion: v1
kind: Pod
metadata:
  name: tensorflow-gpu
spec:
  nodeSelector:
    gpu: "true"
  containers:
  - name: tensorflow
    image: tensorflow/tensorflow:nightly-jupyter
    ports:
    - containerPort: 8888
      protocol: TCP
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
//위와같이 spec:라인 밑에 nodeSelector을 넣어주어 그밑에 gpu 레이블을 넣어주어서 스케쥴러가 찾을 수 있게끔 yaml파일 수정후
kubectl apply -f tensorflow.yaml //yaml파일 pod 실행


//pod Resources 제한 및 관리

Resource Requests : pod를 실행하기 위한 최소 리소스 양을 지정(스케쥴링의 기준이됨)
Resource Limits   : pod가 사용할 수 있는 최대 리소스 양을 지정

ㅡㅡㅡㅡㅡㅡpod-nginx-request.yamlㅡㅡㅡㅡ
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: nginx
  name: nginx-1
spec:
  containers:
  - image: nginx:1.14
    name: nginx
    ports:
    - containerPort: 80
    resources:          //   이렇게해서 리소스에 requests 추가해서 메모리랑 cpu 최소양 기준 추가 (애플리케이션이 메모리랑,cpu가 이정도는 필요해!! 라는 것의 기준을 명시해준것)
      requests:         //
        memory: 500Mi   //
        cpu: 200m       //

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
kubectl apply -f pod-nginx-request.yaml //해서 실행


ㅡㅡㅡㅡㅡㅡㅡㅡpod-nginx-limit.yamlㅡㅡㅡㅡㅡㅡ
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: nginx
  name: nginx-2
spec:
  containers:
  - image: nginx:1.14
    name: nginx
    ports:
    - containerPort: 80
    resources:
      limits:
        memory: 500Mi
        cpu: 200m

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
limits만 걸어줘도 
kubectl describe pod nginx-2// 해서보면 limits만 걸어줬는데 requests도 걸려져있다.  현업에서는 limit과 requests를 함께 yaml에 수정해놓자!

ㅡㅡㅡㅡㅡㅡwebui.yamlㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: nginx
  name: web
  labels:
    app: web
    release: stable
    tier: frontend
spec:
  nodeSelector:
    disktype: ssd
  containers:
  - image: nginx:1.14
    name: nginx
    ports:
    - containerPort: 80
    resources:
      requests:
        memory: 700Mi
        cpu: 500m

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
이런식으로 만들면된다


