
CNI 에는 weave도있고 aws~~ 도있고 calico 등등 엄청많은 cni가있는데 그중 하나 선택해서 사용하면 자동으로 네트워크가 구성된다.
weave는 인프라 서로다른 ip가지고 통신할 수 있게해줌

kubernetes Service는 lb처럼 서버들을 하나의 단일진입점을 만들어준다.

쿠버네티스 서비스의 4가지 타입
ClusterIP
  -pod그룹의 단일 진입점 생성
NodePort
  -ClusterIp 가 생성된 후 
  -모든 worker node에 외부에서 접속가능 한 포트가 예약
LoadBalancer
  -클라우드 인프라스트럭쳐(aws,gcp)나 오픈스택 클라우드에 적용
  -LoadBalancer를 자동으로 프로 비전하는 기능 지원
ExternalName
  -클러스터 안에서 외부에 접속 시 사용할 도메인을 등록해서 사용
  -클러스터 도메인이 실제 외부 도메인으로 치환되어 동작
  

ㅡㅡㅡㅡㅡㅡㅡㅡㅡsvc.yamlㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
apiVersion: v1
kind: Service
metadata:
  name: appjs-service
spec:
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: appjs
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

kubectl apply -f svc.yaml
kubectl get service appjs-service //랜덤하게 만들어진 clusterIp 확인
kubectl describe svc appjs-service  //하면 3개의 엔드포인트를 볼 수 있다. 엔드포인트 3개중에 하나를 접속하게 해준다는 뜻

kubectl delete svc --all

ㅡㅡㅡㅡsvc.yamlㅡㅡㅡ
apiVersion: v1
kind: Service
metadata:
  name: appjs-service
spec:
  type: ClusterIP
  clusterIP: 10.100.100.100    //고정ip 잡음
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: appjs
ㅡㅡㅡㅡㅡㅡㅡㅡㅡ
appjs들을 묶어준것

kubectl apply -f svc.yaml
kubectl get svc  // svc는 service 줄임말

kubectl run web --image=httpd:2.2 --port 80 //을 만들어주고

kubectl exec web -it -- /bin/bash    //로 접속해서
  #apt install update
  #apt install curl
  #curl 10.100.100.100  // curl명령어로 확인해보면 연결이되고 clusterip로 잘 lb가 구현된다는 것을 확인가능하다.


ㅡㅡㅡㅡㅡㅡweb-svc.yamlㅡㅡㅡㅡㅡㅡ
apiVersion: v1
kind: Service
metadata:
  name: web-service
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 8080
    nodePort: 30100
  selector:
    app: web

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
kubectl get svc // 서비스 확인

web pod들을 하나로 묶어서 node의 포트 30100번을 열어줌

kubectl apply -f rs-appjs.yaml //rs pod를 3개만든다 
kubectl apply -f svc-appjs.yaml //service 생성 clusterIP가 생성되서 rs 의pod들을 하나의 엔드포인트로 묶는다 진입점을 묶는것임(알아서 로드발란스해줌)
kubectl get svc
kubectl describe svc appjs-service  //보면 rs pod의 엔드포인트 3개가 있음.

clusterIP는 외부에서 접속안됨 외부에서 접속하려면 NodePort를 만들면 외부에서 접속가능함 NodePort만들면 clusterIP자동생성
Nodeport를 생성해야 외부에서 접속되고 그포트는 30000~32767 사이를 쓰면된다. 

apiVersion: v1
kind: Service
metadata:
  name: appjs-service-nodeport
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 8080
    nodePort: 30123
  selector:
    app: appjs

이런식으로 30123을 열어주어 node들의Ip를통해 웹에 접속하면된다 node1번ip가 10.0.0.1이고 node2번iprk 10.0.0.2면  웹에 10.0.0.1or2:30123 을해주면 접속된다.
외부에서 접속하려면 aws에서 alb를 연결해서 node ip를 연결하면 접속가능
node끼리 접속이되는이유는 weave를 설치해서 node끼리 서로 연결이된다.


ㅡㅡㅡㅡㅡsvc-session.yamlㅡㅡㅡㅡ
apiVersion: v1
kind: Service
metadata:
  name: appjs-session
spec:
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: appjs
  sessionAffinity: ClientIP                 //여기부분 추가했음 clusterIP Service에서
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

세션유지 ex)장바구니에 내가담은 물건들이 담겨있는데 lb가 다른 pod로 연결되어 내가담은 물건들이 없어지는 상황을 방지하기위해 세션유지를 이용해 한번 들어왔던 pod로 계속 유지되게하는 방법)

ExternalIP -하나이상의 클러스터 노드로 라우팅되는 외부IP가 있는 경우 쿠버네티스 서비스를 externalIP로 노출 시킬 수 있다  //잘안씀 ㅋㅋ 예외적인상황에서만 씀 포트부족할때 30000번대
  ex) node1에만 80번포트를 열어주고 싶을때 사용

LoadBalancer 를 .yaml파일에 type: 에 넣어주고 하면 외부에서 사용자들이 접속할 수 있는 alb가 만들어진다. 그 alb의 도메인네임을 긁어서 사용하면 접속할 수 있다. (eks에서만 가능)



  
  
